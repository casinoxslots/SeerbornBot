# -*- coding: utf-8 -*-
# ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

import sys
import os
import io
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ ---
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
os.environ["PYTHONIOENCODING"] = "utf-8"
os.environ["LANG"] = "ru_RU.UTF-8"
os.environ["LC_ALL"] = "ru_RU.UTF-8"

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ .env")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ---
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª ---
def log_error(message: str):
    with open("logs.txt", "a", encoding="utf-8") as log:
        log.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÆ –ü—Ä–∏–≤–µ—Ç, —è SeerbornBot. –ì–æ—Ç–æ–≤ –∑–∞–≥–ª—è–Ω—É—Ç—å –∑–∞ –≥—Ä–∞–Ω—å?")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: {user_message}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ —É–º–Ω—ã–π –ò–ò –ø–æ –∏–º–µ–Ω–∏ Seerborn."},
                {"role": "user", "content": user_message}
            ]
        )

        ai_response = completion.choices[0].message.content.strip()
        print(f"[Seerborn]: {ai_response}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(ai_response)

    except Exception as e:
        error_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        await update.message.reply_text(error_text)
        log_error(error_text)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ SeerbornBot –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

